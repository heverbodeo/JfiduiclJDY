name: docker release

on:
  workflow_dispatch:
    inputs:
      TAG_NAME:
        description: 'Tag name that the major tag will point to'
        required: true

  release:
    types: [released]

permissions:
  packages: write
  contents: read

env:
  TAG_NAME: ${{ github.event.inputs.TAG_NAME || github.event.release.tag_name }}
  
jobs:
# ===============================================================
#   Building Dev Images
# ===============================================================
  release:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    
    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        version: 'tags/${{ env.TAG_NAME }}'
        regex: true
        file: "dragonfly-.*\\.tar\\.gz"
        target: 'releases/'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:          
          platforms: arm64,amd64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract artifacts
      run: |
        ls -l
        ls -l releases
        for f in releases/*.tar.gz; do tar xvfz $f -C releases; done
        rm releases/*.tar.gz
    
    - name: Build dragonfly ubuntu
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        
        # Define QEMU settings inside the builder
        build-args: |
          QEMU_CPU=max,pauth-impdef=on  

        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ghcr.io/${{ github.repository }}:ubuntu
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ env.TAG_NAME }}
          ghcr.io/${{ github.repository }}:${{ env.TAG_NAME }}-ubuntu
          
        file: tools/docker/Dockerfile.ubuntu-prod
        cache-from: type=registry,ref=${{ github.repository }}:latest
        cache-to: type=inline
